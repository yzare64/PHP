برنامه‌نویسم و توسعه‌دهنده وب. یاد بگیریم و یاد بدیم 😉 ✌️
برنامه نویس با دولوپر فرق داره 
برنامه نویس : کدنویسی و انتخاب زبان برنامه نویسی پروژه و به تجزیه و تحلیل و ساختار و معماری نرم افزار کاری نداره
دولوپر: علاوه بر وظایف برنامه نویس در واقع کار تجزیه و تحلیل و ساختارو معماری نرم افزار و ... انجام میده 


junior و mid-level و senior 
توسعه دهنده مبتدی -توسعه دهنده میان رده -توسعه دهنده ارشد


تفاوت بین توسعه‌دهنده مبتدی، میانی و ارشد، به تعداد سالهای تجربه کاری نیست. میشه گفت که توسعه‌دهنده های ارشد، نسبت به بقیه ماهر تر هستن. ولی صرفا داشتن دانش، کافی نیست. یک توسعه‌دهنده ارشد یک ذهنیت منسجم‌تری داره که باعث میشه کدهای ساده‌تر و قابل توسعه بنویسه. یکی از وظایف مهم توسعه‌دهنده ارشد اینه که بتونه در نقش یک مربی برای توسعه‌دهنده‌های میانی و مبتدی باشه.

هیچ کسی نمیتونه ادعا کنه که من همه چیز رو بلدم که این مطمئنا شامل توسعه‌دهنده‌های ارشد هم میشه. اما برای توسعه‌دهنده‌های ارشد سوالات متفاوت‌تری پیش میاد و شاید جواب اونها رو کسی ندونه. توسعه‌دهنده‌های ارشد خودشون رو مسئول وظایفی میدونن که هیچ‌کس دیگه‌ای قادر به انجام اونها نیست.
همه چیز برمیگرده به مهارت!

این جلمه رو من خیلی دوست دارم:

    اگر به کدهای 6ماه قبلتون نگاه کردین و حالتون بد شد، این یعنی پیشرفت کردین :)

...

برای اینکه از سطح مبتدی پیشرفت کنیم، باید به کدهای بقیه نگاه کنیم، از اونها تقلید کنیم یا اونها رو به چالش بکشیم.

برای اینکه از سطح میانی پیشرفت کنیم، باید خودمون رو آماده شیرجه زدن تو مسائلی کنیم که کمتر کسی مایل به حل اونهاست و همچنین باید تو نرم‌افزارها و ابزارهای مرتبط تبدیل به یک استاد بشیم.

آقای مارتین فاولر میگه:

    یک برنامه‌نویس نادان، کدی مینویسه که فقط یک کامپیوتر بتونه اون رو بفهمه. یک برنامه‌نویس خوب کدی مینویسه که یک انسان بتونه اون رو متوجه بشه

***********************************************************************************************
7 راه برای اینکه برنامه‌نویس بهتری بشیم
1. من چیزی نمیدونم!
سقراط:    تمام چیزی که میدونم، اینه که هیچ چیزی نمیدونم
2. کدهای خودتون رو به چالش بکشین
3. "کد من کار میکنه" زمان خوبی برای دست کشیدن نیست!باید از خودمون بپرسیم که چه جوری میتونم این قسمت رو بهینه تر کنم؟ سریع تر کنم؟ سبک تر کنم؟ خواناتر کنم؟

بهتره که همینجا دست به کار بشیم، تا اینکه بعدا کل پروژه رو Refactor کنیم!
4. خوندن کدهای دیگران
در نظر داشته باشین که خوندن کدهای دیگران به منظور کپی/پیست کردن کدهای اونها نیست که در اون صورت مسیر رشد نزولی میشه. چون چشم بسته تبعیت کردن از کدهای دیگران 2 نکته منفی داره:

    ممکنه کدهای اونها بهینه نباشه و یا دارای اشکال باشه
    باعث میشه خودمون درباره حل مسئله فکر نکنیم

5. شروع یک پروژه شخصی واقعی

6. رفت و آمد با برنامه‌نویس های خوب‌تر از ما
7. تکنیک‌ها رو یاد بگیریم، نه ابزارها!
به نظر من با ارزش‌ترین برنامه‌نویس کسی هست که اصول برنامه‌نویسی مثل اصول SOLID، الگوهای طراحی، اصول شی‌گرایی و ... رو درک کرده باشه. چون ابزارها و زبان‌ها میان و میرن، ولی اصول و پایه‌ها هیچوقت منقضی نمیشن. اگه وابسته به ابزار باشیم، با منقضی شدن اون ابزار، علم ما هم منقضی میشه.
ببین آقا صابر باید روی مفاهیم پایه‌ای برنامه‌نویسی و توسعه‌ی نرم‌افزار تمرکز کنی! اگه تازه‌کار هستین، همه چیز رو خودتون بنویسین و زود سمت ابزارها نرین. زمانی سمت ابزارها برین که بتونین این ابزار رو خودتون پیاده‌سازی کنین.
- مثلا اگه می‌خواین جاوااسکریپتتون قوی بشه باید خام خام کار کنین یه مدت و اصلا سمت هیچ فریم‌ورکی نرین. 
- برای حل مسائل اول خودتون یکم فکر کنین و بعد برین سمت گوگل و استک‌اورفلو
- برای تفریح، کدهای قدیمیتون رو نگاه کنین و ری‌فکتور انجام بدین
- و اینکه همیشه و هر روز خودتون رو بروز نگه دارین. روزی نیم ساعت هم کافیه. هر روز یک مقاله بخونین کافیه. مقاله هم لازم نیست که حتما فنی و تخصصی باشه. مرتبط با کار باشه
