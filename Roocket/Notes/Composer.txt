Composer? Composer یک ابزار برای مدیریت وابستگی‌هاست به این معنی که هر پروژه یک سری وابستگی‌های به پکیج‌های مختلف دارد که Composer می‌تواند به سادگی آن‌ها را مدیریت کند.
وابستگی‌های تو در تو: زمانی که یک پکیج از پکیجی دیگر در خودش استفاده کند و وابستگی همینطور ادامه داشته باشه پس آپدیت پکیج ها سخت میشه که در اینجا باید از composer  استفاده کرد برای میدریت وابستگی ها 
در کنار یادگیری Composer برای نصب و مدیریت پکیج‌ها، بتوانید از Composer برای autoload پروژه خود استفاده کنید یا پکیجی را آماده و در اختیار برنامه نویسان دیگر قرار دهید.
سایت کامپوزر  getcomposer.org
دلایل استفاده از کامپوزر 
1-استفاده از پکیج دیگران 
2- autoload 
3- ساخت پکیچ خودمان و انتشار آن 

packagist.com پکیج های خصوصی private
packagist.org پکیج های عمومی public

برای نصب کامپوزر حتما باید در ویندوز یا لینوکس php  نصب شده باشد
برای اینکه تست کنیم از php -v  استفاده میکنیم 

composer init یک فایل ایجاد میکنه که شامل نام و توضیحات و نام پکیج ها و ورژنشون و ...  تنظیمات ابتدایی composer
محتوای فایل composer.json  از نوع  json  میباشد

در سایت packagist.og اگر سرچ بزنیم چیزی نشان نمیده چون تحریم هستیم و باید از  سایت  shecan.ir رفع تحریم بکنیم در واقع باید dns تغییر دهیم 

composer require packagename  نصب پکیج 
composer remove packagename   حذف پکیج

composer.lock  اطلاعات بیشتر در مورد پکیج ها را نگه میدارد 

با استفاده از : میتوان ورژن خاصی را نصب کرد مانند ز
    "autoload": {
        "psr-4": {
            "Model\\": "model/",
            "App\\" : "app/"
        }
    }یر 
composer require packagename:1.1.31

https://semver.org/ نسخه بندی معنایی
اگر چندین باگ هم رفع شود یا فیکس شود فقط یک رقم به عدد سوم اضافه میشود

عدد اول در ورژن:زمانی که ویژگی ناسازگار با ورژن قبلی به وجود آید، تغییر می کند
عدد دوم در ورژن :زمانی که ویژگی جدید سازگار با ورژن قبلی به وجود آید، تغییر می‌کند
عدد سوم در ورژن:زمانی که باگی حل شود و باعث ناسازگار نشدن ورژن قبلی نشود، تغییر می‌کند

کارکترهای مورد استفاده در ورژن بندی کامپوزر 
>
>=
<
<=
*
~ تیلدا
^
برای اطلاعات در مورد این کارکترها کلیپ 10 راکت دیده شود و یا به سایت زیرقسمت SUMMERY رفته و خوانده شود
https://getcomposer.org/doc/articles/versions.md

با استفاده از autoload  کامپوزر میتوان هم فایل های داخل پوشه vendor  را لود کرد و هم در پروژه شخصی خودمان فایلهایمان را لود کرد
 در هر فایل پروژه خود میتوان با دستور زیر autoload  کامپوزر را فراخوانی کرد 
require  './vendor/autoload.php';

https://jsonplaceholder.typicode.com api فیک از نوع json  

guzzlehttp/guzzle  برای استفاده از api 

برای ساخت autoload برای پروژه شخصی به کلیپ 13 راکت مراجعه شود
composer dumpautoload autoload  کامپوزر رو دوباره  میسازه برای ما
در فایل composer.json  باید کد زیر را برای شناختن پوشه هایمان اضافه کنیم 

    "autoload": {
        "psr-4": {
            "Model\\": "model/",
            "App\\" : "app/"
        }
    }
 
حتما حتما باید دستور زیر را نوشت تا autoload کامپوزر فراخوانی شود 
require_once "./vendor/autoload.php";

اگر بخواهیم مثلا فایلی را در چندین جای پروژه فراخوانی بکنیم باید در فایل composer.json کد زیر را اضافه کنیم 

    "autoload": {

        "files": ["app/function.php"]
    }
و بعد دستور composer dumpautoload  بزنیم که دوباره این فایل ساخته شه

همیشه باید پوشه vendor  را از پروژه خود که میخواهیم مثلا برای دوستان بفرستیم حذف کنیم و فقط فایل  composer.json را بفرستیم و سپس دستور  composer install  بزنیم تا دوباره vendor  ساخته شه
زمانی که پکیج یا پروژه بر روی گیت هاب یا packagist.org رفت دیگر باید ورژن بندی شود
نکته مهم در مورد آپدیت پکیج در packagist : باید وارد اکانت خود در سایت packagist.org شد و سپس وارد تنظیمات شد و بعد گزینه آپدیت اتوماتیک را فعال کرد که همیشه خودکار آپدیت شه 

اضافه کردن tag  به پکیج یا پروژه گیت هاب 
git tag -a 0.1.0 -m "first version 0.1.0"
git tag 
git push --tags
 
0.1.5 پروژه در توسعه ابتدایی قرار داره

اگر بخواهیم یک پکیج را توسعه بدهیم و تست هایی انجام بدهیم که درست کار میکنه یا نه باید در فایل composer.json از کد زیر استفاده کنیم که در واقع پکیج را از لوکال میخواند . اگر پکیج در لوکال باشد از لوکال فراخوانی میشه و اگر در لوکال نبود در require
 دنبالش میگرده 
"repositories":[  یک آرایه هست که یک json  داخلشه
        {
            "type": "path",
            "url": "../validation" مسیر پکیج لوکال 
        }
    ] 
و باید ورژن پکیج را در require  حذف کرد و به شکل زیر نوشت 
  "require": {
        "yzare64/validation": "dev.main"   main  نام برنچ هست
    },
برای توضیحات بیشتر کلیپ 23 راکت ببینم

اگر بخواهیم تعیین کنیم که ورژن php  حتما فلان نسخه باشه از کد زیر استفاده میکنیم 
   "require": {
        "php": ">=7.0.0"
    },

اگر در ورژن 0.1.0 باشیم و مثلا ویژگی جدیدی به پکیج اضافه کنیم چون ناسازگاری به وجود نمی آورد پس رقم سوم میشه 1 یعنی 0.1.1
اگر در ورژن 0.1.0 باشیم و تغییری ناسازگار داشته باشیم در واقع میشه 0.2.0 چون رقم اصلی صفر هست و هنوز پکیج ما استیبل نشده پس رقم دوم تغییر میکنه 

وقتی تغییرات ناسازگار و بزرگی داشته باشیم آپگرید میشه پکیجمون

اگر ورژن ما 1.0.0 باشه و تعییراتی داشته باشیم که باعث ناسازگاری بشه پس باید در این حالت ورژن ما بشه 2.0.0

نکات ساخت پکیج با کامپوزر 
به کلیپ 16 راکت مراجعه شه 

composer update  در واقع پکیج ها رو آپدیت میکنه 
composer self-update خود کامپوزر رو آپدیت میکنه 

this is a pre-relase این گزینه در قسمت تگ ها یعنی هنوز پروژه ما به حالت پروداکشن نرسیده

برای اینکه تغییرات در تگ مورد نظر اعمال شود حتما باید قبل تگ جدید کامیت کنیم 

 git push --tags  کامیت ها و تگ ها اعمال میشن  