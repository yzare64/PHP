۱-کنترل نسخه پروژه ابزار یا سرویس  xyz 0.0.1
2-دنبال کردن تغییرات و ممکنه اتفاقی برای برنامه نویس بیفته و واکذاری پروژه به دیگری
۳-توسعه پروزه به صورت تیمی 
۴-مدیریت شاخه‌های مختلف از پروژه
۵-گیت یک سرویس هست و گیت هاب و گیت لب ابزارهای آنلاین گیت هستن

نصب گیت از سایت git-scm.com

git مشاهده همه دستورات 
git --version 

در هر مرحله -h یا --help راهنمای دستور را به ما نشان میدهد

اولین کار اینه که یک ریپازیتوری یا مخرن ایجاد کنیم
git init مخفی هست در ویندوز

git status دیدن تغییرات

stage حافظه موقت

رنگ سبز یعنی فایل اضافه کردیم و رنگ قرمز یعنی حذف کردیم

git add filename
git add . اضافه کردن همه تغییرات به stage

git commit -m "description" ثبت در ریپازیتوری

git commit -a -m "description" -a در واقع کار git add رو میکنه 

git rm --cached <file> ممکنه برای هر کسی پیش بیاد که به اشتباه فایلی را داخل گیت add کرده باشد، مانند فایل هایی که تو پوشه target ساخته می شود و از اون تاریخ به بعد، حتی با تغییر فایل gitignore. نیز هنوزم گیت تغییرات اون فایل را دنبال می کند. برای این که دیگه تغییرات سمت repository گیت نرود از دو تا دستور زیر استفاده می کنید.

git rm --cached -r . ممکنه برای هر کسی پیش بیاد که به اشتباه فایلی را داخل گیت add کرده باشد، مانند فایل هایی که تو پوشه target ساخته می شود و از اون تاریخ به بعد، حتی با تغییر فایل gitignore. نیز هنوزم گیت تغییرات اون فایل را دنبال می کند. برای این که دیگه تغییرات سمت repository گیت نرود از دو تا دستور زیر استفاده می کنید.

git diff مشاهده تغییرات با جزییات بیشتر 

git diff --help راهنمای کامل در مورد این دستور

در phpstorm یا ویرایشگری دیگه میشه تغییرات git را مشاهده کنیم

git log کامیت ها رو با یک آیدی منحصرفرد نشان میدهد لیست

git log --oneline لیست کامیت ها رو به صورت خلاصه نشان میدهد

git log -1 --oneline 

git log -p کامیت ها رو با جزییات نشان میدهد و برای خروج از این حالت باید q بزنیم

git checkout -- file name تغییرات فایل را به حالت قبل برمیگردونه 
git checkout -- .  یعنی status  رو یجورایی پاک میکنه 
تغییرات همه فایل ها رو به حالت قبل برمیگردونه 
git restore . یعنی status  رو یجورایی پاک میکنه 
تغییرات همه فایل ها رو به حالت قبل برمیگردونه 

git reset HEAD . از stage تغییرات خارج میکند 
git restore --staged .از stage تغییرات خارج میکند 
git rest قسمتی از آیدی کامیت       در واقع برمیگرده به تغییرات قبل کامیت و از استیج خارج میکنه

git reset --hard commitID تغییرات کامیت ها رو واقعی از فایل ها حذف میکنه یعنی تغییرات رو از استیج حذف میکنه و از حالت وضعیت هم حذف میککنه و از فایل هم حذف میکنه 

زمانی که میخوایم کامیت ها رو ریست کنیم حتما باید آیدی کامیت ها برداریم چون ممکنه دوباره بخوایم بازگردانی کنیم

branch === شاخه درخت ==ایجاد نسخه
git branch dev برنج dev رو ایجاد میکنه
تمامی برنج ها رو نشان میدهد  git branch -a
اگر میخواهیم در مورد برنچ بیشتر بدانیم باید وارد گیت هاب لاراول شویم و قسمت برنچ آن را ببینیم که نسخه ها ی آن را نمایش میدهد و برنچ های دیگرش را 

git checkout branchname سوییچ به برنچ مورد نظر
git branch -d dev حذف برنج 
git checkout -b dev ایجاد برنج 

همیشه قبل از سوییچ بین برنچ ها حتما  status بگیرید

git merge dev باید وارد مثلا برنچ مستر شویم و سپس دستور مرج زیر را وارد کنیم 
git log میتوانیم تغییرات برنچ ها و ادغام را ببینیم 
git log --graph به صورت شاخه ای نمایش دادن

زمانی که بخواهیم بین دو برنچ سوییچ کنیم تمام تغییرات اگر کامیت نشده باشد به برنچ جاری انتقال داده میشود برای همین یا باید کامیت کنیم یا اینکه از stash استفاده کنیم
git stash --help راهنما
git stash تغییرات را در استش با نام دلخواه و مسیج دلخواه ذخیره میکند 
git stash save "massage" تغییرات را با نام دلخواه و مسیجی که وارد میکنیم ذخیره میکند
git stash list لیست را نشان میدهد
git stash drop stashname حذف میکند
git stash show stashname استش رو نشون میدهد 
git stash show -p stashname استش رو با جزییات کامل نشون میدهد 
git stash pop stashname استش رو فراخونی میکند و از لیست استش ها حذفش میکند 
git stash applay stashname استش رو فراخونی میکند ولی حذفش نمیکند 
نکته : استش در هر مخزنی که سوییچ کنیم در دسترس میباشد

touch .gitignore ایجاد این فایل برای دنبال نکردن یکسری پوشه ها و فایل ها در گیت
مثلا پوشه node_module یا vendor

!filename.txt این فایل با این پسوند را دنبال کن

git rm --cached -r . اگر از قبل پوشه یا فایل هایی در گیت دنبال شده باشند و حالا بخواهیم دنبال نشوند باید از این دستور استفاده کرد تا از کش پاک شوند و دوباره باید آنها را اضافه کرد و بعد کامیت کرد
git add .
git commit -m "description"

git config --global or --local user.name "username"
git config --global or --local user.email "email"

git config --global core.editor editorname میتوان ویرایشگر ست کرد 

مسیر کانفیگ لوکال گیت در .git\config
مسیر کانفیگ گلوبال در c:\users\...\.gitconfig

git clone repositorypath برای اولین بار اگر بخواهیم از ریپازیتوری روی گیت هاب کپی بگیریم از این دستور استفاده میکنیم
git pull -u remotename branchname هر وقت بخواهیم تغییرات را از ریپیازیتوری دریافت کنیم از این دستور استفاده میکنیم
git pull  -f remotename branchname اگر تغییرات مانند کامیت و مرج شدن بر روی سیستم محلی در هنگام پول کردن اعمال نشوند از -f استفاده میکنیم تا به اجبار اعمال شوند ولی نباید اینکار را همیشه انجام داد 
fork در گیت هاب یعنی اینکه پروژه دیگران را در ریپازیتوری اکانت خودمان کپی کنیم و مشارکت کنیم در پروژه

git remote remove remotename 

مراحل مینیفای کردن فایل 
1-https://nodejs.org/en/ نصب نسخه مناسب برای ویندوز
2-npm -v نسخه رو نشون میده
3-npm install minifier --save--dev نصبش در قسمت وابستگی ها
4-  "scripts": {
    "build": "minify --output bootstrap-rtl.min.css bootstrap-rtl.css" 
  }
5-npm run build اجرا

از webpack هم میشه برای مینیفای استفاده کرد

tuoch README.md اضافه کردن توضیحات به ریپازیتوری و خیلی مهم است این فایل .برای اینکه الگو بگیریم میتوانیم فایل های ریپازیتوری دیگران را ببینیم .
در این فایل میتوان ار کدهای اچ تی ام ال استفاده کرد و همچنین از markdown گیت هاب استفاده کرد 

touch LICENSE ایجاد لایسنس برای پروژه 

https://img.shields.io برای انتخاب آیکن لایسنس و ورژن و ...

npmjs.com سایت مدیریت پکیج های جاوااسکریپت 
packagist.org سایت مدیریت پکیج های پی اچ پی

npm init فایل package.json رو میسازه
npm login برای لاگین کردن
npm whoami من چه کسی هستم 
npm publish برای انتشار به وبسایت یا آپدیت

composer init ساخت فایل composer.json
submit این گزینه بر روی سایت pachagist میباشد و برای اضافه کردن ریپازیتوری 















